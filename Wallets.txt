Wallets регестрируется в javascript по имени wallets 

walletsCreateWatchWalletsListResultJs(isMhc, result, errorNum, errorMessage)
Возвращается при создании watch кошельков
Аналог createWatchWalletsListMHCResultJs и createWatchWalletsListResultJs

Q_INVOKABLE void createWallet(bool isMhc, QString password);
# Generates Metahash wallet, puts this generated wallet to ~/.metahash_wallets/ named address. 
# javascript is called after completion of this function
walletsCreateWalletResultJs(fullKeyPath, publickey, address, exampleMessage, signature, errorNum, errorMessage)

Q_INVOKABLE void createWalletWatch(bool isMhc, const QString &address);
# Creates Metahash watch wallet with address, puts this file wallet to ~/.metahash_wallets/ named address with .watch suffix.
# javascript is called after completion of this function
walletsCreateWatchWalletResultJs(fullKeyPath, address, errorNum, errorMessage)

Q_INVOKABLE removeWalletWatch(bool isMhc, const QString &address)
# Removes Metahash watch wallet with address, file wallet to ~/.metahash_wallets/ named address with .watch suffix.
# javascript is called after completion of this function
walletsRemoveWatchWalletResultJs(address, errorNum, errorMessage)

Q_INVOKABLE void checkWalletExist(bool isMhc, const QString &address);
# Checks is wallet (any type) with address exists.
# javascript is called after completion of this function res: true/false
walletsCheckWalletExistResultJs(address, res, errorNum, errorMessage)

Q_INVOKABLE checkWalletPassword(bool isMhc, const QString &address, const QString &password)
# Проверяет правильность пароля от данного кошелька
# javascript is called after completion of this function
walletsCheckWalletPasswordResultJs(requestid, address, "Ok"/"Not ok", errorNum, errorMessage)

Q_INVOKABLE void checkAddress(QString address);
# To check the address for correctness. The result will return to the function:
walletsCheckWalletAddressResultJs(address, "Ok"/"Not ok", errorNum, errorMessage)

Q_INVOKABLE createContractAddress(const QString &address, int nonce)
# Creates v8 contract address based on address and nonce
# javascript is called after completion of this function 
walletsCreateContractAddressResultJs(result, errorNum, errorMessage)

Q_INVOKABLE signMessage(bool isMhc, const QString &address, const QString &text, const QString &password)
# Message's signing.
# javascript is called after completion of this function 
walletsSignMessageResultJs(signature, publicKey, errorNum, errorMessage)

Q_INVOKABLE void signMessage2(bool isMhc, const QString &address, const QString &password, const QString &toAddress, const QString &value, const QString &fee, const QString &nonce, const QString &dataHex)
# signs the transaction in a new binary format
# value, fee, nonce - a string with decimal number
# Result returns to 
walletsSignMessage2ResultJs(signature, publicKey, txHex, errorNum, errorMessage)
