Wallets регестрируется в javascript по имени wallets 

walletsCreateWatchWalletsListResultJs(isMhc, result, errorNum, errorMessage)
Возвращается при создании watch кошельков
Аналог createWatchWalletsListMHCResultJs и createWatchWalletsListResultJs


MTH


Q_INVOKABLE void createWallet(bool isMhc, QString password);
# Generates Metahash wallet, puts this generated wallet to ~/.metahash_wallets/ named address. 
# javascript is called after completion of this function
walletsCreateWalletResultJs(fullKeyPath, publickey, address, exampleMessage, signature, errorNum, errorMessage)

Q_INVOKABLE void createWalletWatch(bool isMhc, const QString &address);
# Creates Metahash watch wallet with address, puts this file wallet to ~/.metahash_wallets/ named address with .watch suffix.
# javascript is called after completion of this function
walletsCreateWatchWalletResultJs(fullKeyPath, address, errorNum, errorMessage)

Q_INVOKABLE removeWalletWatch(bool isMhc, const QString &address)
# Removes Metahash watch wallet with address, file wallet to ~/.metahash_wallets/ named address with .watch suffix.
# javascript is called after completion of this function
walletsRemoveWatchWalletResultJs(address, errorNum, errorMessage)

Q_INVOKABLE void checkWalletExist(bool isMhc, const QString &address);
# Checks is wallet (any type) with address exists.
# javascript is called after completion of this function res: true/false
walletsCheckWalletExistResultJs(address, res, errorNum, errorMessage)

Q_INVOKABLE checkWalletPassword(bool isMhc, const QString &address, const QString &password)
# Проверяет правильность пароля от данного кошелька
# javascript is called after completion of this function
walletsCheckWalletPasswordResultJs(requestid, address, "Ok"/"Not ok", errorNum, errorMessage)

Q_INVOKABLE void checkAddress(QString address);
# To check the address for correctness. The result will return to the function:
walletsCheckWalletAddressResultJs(address, "Ok"/"Not ok", errorNum, errorMessage)

Q_INVOKABLE createContractAddress(const QString &address, int nonce)
# Creates v8 contract address based on address and nonce
# javascript is called after completion of this function 
walletsCreateContractAddressResultJs(result, errorNum, errorMessage)

Q_INVOKABLE signMessage(bool isMhc, const QString &address, const QString &text, const QString &password)
# Message's signing.
# javascript is called after completion of this function 
walletsSignMessageResultJs(signature, publicKey, errorNum, errorMessage)

Q_INVOKABLE void signMessage2(bool isMhc, const QString &address, const QString &password, const QString &toAddress, const QString &value, const QString &fee, const QString &nonce, const QString &dataHex)
# signs the transaction in a new binary format
# value, fee, nonce - a string with decimal number
# Result returns to 
walletsSignMessage2ResultJs(signature, publicKey, txHex, errorNum, errorMessage)

Q_INVOKABLE void signAndSendMessage(bool isMhc, const QString &address, const QString &password, const QString &toAddress, const QString &value, const QString &fee, const QString &nonce, const QString &dataHex, const QString &paramsJson)
# Sends transaction with C++ (like signMessageDelegate, but differs because of the data field)
# Result returns to 
# if nonce empty, then calc nonce
walletsSignAndSendMessageResultJs("Ok/Not ok", errorNum, errorMessage)
# If Ok returns, events from transactions are to be expected (txsSendedTxJs etc.). Ok status doesn't guarantee that the transaction has been processed correctly on the server.

Q_INVOKABLE signAndSendMessageDelegate(bool isMhc, const QString &address, const QString &password, const QString &toAddress, const QString &value, const QString &fee, const QString &valueDelegate, const QString &nonce, bool isDelegate, const QString &paramsJson)
# signs the transaction in a new binary format with delegate data
# if nonce empty, then calc nonce
paramsJson - json of {"countServersSend": 3, "countServersGet": 3, "typeSend": "proxy", "typeGet": "torrent", "timeout_sec": 6} type
# Result returns to 
walletsSignAndSendMessageDelegateResultJs("Ok/Not ok", errorNum, errorMessage)
# If Ok returns, events from transactions are to be expected (txsSendedTxJs etc.). Ok status doesn't guarantee that the transaction has been processed correctly on the server.

Q_INVOKABLE void getOnePrivateKey(bool isMhc, const QString &address, bool isCompact);
# Returns private key to the function
walletsGetOnePrivateKeyResultJs(key, errorNum, errorMessage)
# The isCompact parameter is used if you need a more compact format.

Q_INVOKABLE void savePrivateKey(bool isMhc, const QString &privateKey, const QString &password);
# Tries to recognize a key type and saves it to the right place
# After the operation is completed, it calls function
walletsSavePrivateKeyResultJs("ok", errorNum, errorMessage)

Q_INVOKABLE void saveRawPrivateKey(bool isMhc, const QString &rawPrivateKey, const QString &password)
# Saves private key
# rawPrivKey - unencrypted private key
# javascript is called after completion of this function 
walletsSaveRawPrivateKeyResultJs(address, errorNum, errorMessage)

Q_INVOKABLE void getRawPrivateKey(bool isMhc, const QString &address, const QString &password)
# Returns unencrypted  private key
# javascript is called after completion of this function 
walletsGetRawPrivateKeyResultJs(result, errorNum, errorMessage)



RSA



Q_INVOKABLE void createRsaKey(bool isMhc, const QString &address, const QString &password)
# Generates rsa key for specified address.
# javascript is called after completion of this function 
walletsCreateRsaKeyResultJs(publicKeyHex, errorNum, errorMessage)

Q_INVOKABLE void getRsaPublicKey(bool isMhc, const QString &address)
# Returns public key from rsa key
walletsGetRsaPublicKeyResultJs(publicKeyHex, errorNum, errorMessage)

Q_INVOKABLE void copyRsaKey(bool isMhc, const QString &address, const QString &pathPub, const QString &pathPriv)
# Копирует ключи по указанному пути в свой каталог.
# javascript is called after completion of this function 
walletsCopyRsaKeyResultJs("Ok", errorNum, errorMessage)

Q_INVOKABLE void copyRsaKeyToFolder(bool isMhc, const QString &address, const QString &path)
# Копирует rsa ключи в указанный каталог.
# javascript is called after completion of this function 
walletsCopyRsaKeyToFolderResultJs(requestId, "Ok", errorNum, errorMessage)
